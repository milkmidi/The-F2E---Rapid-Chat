/*
author milkmidi
version 1.1.1
*/
defaultTransition(property = all, time = 0.35s, timingFun = cubic-bezier(0.215, 0.61, 0.355, 1))
  transition property time timingFun

imageSize(imgUrl)
  return image-size(replace('~', '', imgUrl))
  
imageWidth(imgUrl)
  return imageSize(imgUrl)[0]
imageHeight(imgUrl)
  return imageSize(imgUrl)[1]

pxToRem(value)
  u = unit(value)
  if (u is 'px')
    return unit(value/16, 'rem')
  return unit(value, u)

bg(imgUrl, lessMediaQuery = 0)
  $size = imageSize(imgUrl)
  $w = $size[0]
  $h = $size[1]
  width $w
  height $h
  background-image url(imgUrl)
  background-repeat no-repeat
  background-size 100% auto
  if lessMediaQuery != 0
    @media (max-width: unit(lessMediaQuery, px))
      width $w * 0.5
      height $h * 0.5

bgScale(imgUrl, scale = 1)
  $size = imageSize(imgUrl)
  $w = $size[0] * scale
  $h = $size[1] * scale
  width $w
  height $h
  background-image url(imgUrl)
  background-repeat no-repeat
  background-size 100% auto

vw(width, base = 640)
  unit(width / base * 100, 'vw')
vh(width, base = 640)
  unit(width / base * 100, 'vh')

shim(w, h)
  &:before
    content ''
    display block
    width 100%
    padding-top unit(h / w * 100, '%')

shimImg(imgUrl)
  width 100%
  height initial
  $size = imageSize(imgUrl)
  background-size 100% auto
  background-repeat no-repeat
  background-image url(imgUrl)
  shim($size[0], $size[1])

convertUnit(val)
  return unit(val) == '' ? unit(val, 'px') : val

-pos(type, args)
  length = length(args) / 2
  position unquote(type)
  for index in (0...length)
    newIndex = index * 2
    nextIndex = newIndex + 1
    {args[newIndex]}: args[nextIndex] is a 'unit' ? convertUnit(args[nextIndex]) : 0

absolute()
  -pos('absolute', arguments)

fixed()
  -pos('fixed', arguments)

relative()
  -pos('relative', arguments)

size(w, h)
  width unit(w, 'px')
  height unit(h, 'px')

root(className)
  ~/{className} ^[1..-1]
    {block}

body(className)
  /body{className} &
    {block}

html(className)
  /html{className} &
    {block}

parent(className)
  ../className ^[-1..-1]
    {block}

donut(size)
  size = convertUnit(size)
  display inline-block
  border 3px solid primaryColor
  border-color primaryColor
  border-left-color transparent
  border-radius 50%
  width convertUnit(size)
  height convertUnit(size)
  animation donutSpin 1.2s linear infinite

appendLoading(backGroundColor = rgba(255, 255, 255, 0.9))
  position relative  
  &:before
    donut(30)
    defaultTransition()
    z-index 5
    content ''
    position absolute
    top 0
    right 0
    bottom 0
    left 0
    margin auto
    visibility hidden
  &:after
    defaultTransition()
    content ''
    width 100%
    height 100%
    position absolute
    left 0
    top 0
    background-color backGroundColor
    visibility hidden
    opacity 0
  &.loading
    &:before
    &:after
      visibility visible
      opacity 1

container(extraSize)
  extraSize = convertUnit(extraSize)
  width 100%
  padding-right 15px
  padding-left 15px
  margin-right auto
  margin-left auto
  @media (min-width: 576px)
    max-width "calc(540px - %s)" % extraSize
  @media (min-width: 768px)
    max-width "calc(720px - %s)" % extraSize
  @media (min-width: 992px)
    max-width "calc(960px - %s)" % extraSize
  @media (min-width: 1200px)
    max-width "calc(1140px - %s)" % extraSize

scrollbar(size = 12px, thumbColor = black, trackColor = white)
  size = convertUnit(size)
  &::-webkit-scrollbar
    width size
    height size
  &::-webkit-scrollbar-thumb
    background thumbColor
    &:hover
      background lighten(thumbColor, 10%)
  &::-webkit-scrollbar-corner
  &::-webkit-scrollbar-track
    background trackColor

triangle(size, color = black, direction = 'bottom')
  $sizeHalf = unit(size / 2, px)
  // var equHeight = (Math.sqrt(3)/2*$('#height').val()).toFixed(1);
  $equHeight = floor(unit(0.8660254037844386 * size, px) * 10) / 10
  display inline-block
  width 0
  height 0
  border-style solid
  if direction == 'bottom'
    border-width $equHeight $sizeHalf 0 $sizeHalf
    border-color color transparent transparent transparent
  else if direction == 'top'
    border-width 0 $sizeHalf $equHeight $sizeHalf
    border-color transparent transparent color transparent
  else if direction == 'left'
    border-width $sizeHalf $equHeight $sizeHalf 0
    border-color transparent color transparent transparent
  else if direction == 'right'
    border-width $sizeHalf 0 $sizeHalf $equHeight
    border-color transparent transparent transparent color

random(min,max)
  return floor(math(0, 'random')*(max - min + 1) + min)

spriteSheet(imgUrl, steps, animateName = 'default'+random(0,1000))
  width imageWidth(imgUrl)
  height s("calc(%s / %s)", imageHeight(imgUrl), steps)
  background-image url(imgUrl)
  $aniName = sprite-sheet- + animateName
  animation $aniName 2s infinite steps(steps)
  @keyframes $aniName
    100% 
      background-position 0 s("calc(%s * -1)", imageHeight(imgUrl))